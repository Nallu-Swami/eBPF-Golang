package main
import "fmt"

func main() {
    cnp := make(chan func(), 10)
    for i := 0; i < 4; i++ {
        go func() {
            for f := range cnp {
                f()
            }
        }()
    }
    cnp <- func() {
        fmt.Println("HERE1")
    }
    fmt.Println("Hello")
}

=> ANSWERS <=
1.  - A buffer of size 10 is created with channel cnp. 
    - Then using a for loop times 4 , each iteration creates a Go-Routine with inline function call.
    - In the given function func() a function f() is invoked infinitely meanwhile also reciveing function from the channel cnp.
    - Finally cnp channel again recives functions through an inline function but has no reciever.

2.  As it utilises Go-Routines and channels it can be used in cases such as :
        - Concurrency for a given  I/O 
        - Asynchronus execution 
        - Multiple Event handling 
        - Pipeline for networks or faster data access using channel

3.  The iteration with a counter=4, were important to create Go-Routines and achieve Concurrency.

4.  The {cnp := make(chan func(), 10)} is important as it creates a buffer with 10 slots to hold elements of the type func().

5.  {fmt.Println("HERE1")} The follwoing line does not execute as the channel has no Go-Routine reciever to output the data to the standart output.